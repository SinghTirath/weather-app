{"ast":null,"code":"var _jsxFileName = \"/Users/Tirath/Desktop/XO/weather-app/src/Weather.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport WeatherDisplay from './WeatherDisplay';\nimport './Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const [zip, setZip] = useState('');\n  const [data, setData] = useState(null);\n  const [cordinates, setCordinates] = useState({\n    longitude: 0,\n    latitude: 0\n  });\n  const [option, setOption] = useState(true);\n\n  async function getWeather() {\n    try {\n      const apikey = 'f2bcc407ea95e0bbd8ece48647a3eb8e';\n      const path = option ? `https://api.openweathermap.org/data/2.5/weather?zip=${zip}&appid=${apikey}&units=imperial` : `https://api.openweathermap.org/data/2.5/weather?lat=${cordinates.latitude}&lon=${cordinates.longitude}&appid=${apikey}&units=imperial`;\n      const res = await fetch(path);\n      const json = await res.json();\n      console.log(json);\n      const temp = json.main.temp;\n      const desc = json.weather[0].description;\n      const name = json.name;\n      setData({\n        temp,\n        desc,\n        name\n      });\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords;\n    setCordinates({\n      latitude: crd.latitude,\n      longitude: crd.longitude\n    });\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Weather\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data ? /*#__PURE__*/_jsxDEV(WeatherDisplay, { ...data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        getWeather();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"enter zip\",\n        value: zip,\n        onChange: e => setZip(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setOption(false);\n          navigator.geolocation.getCurrentPosition(success, error, options);\n        },\n        children: \"Get Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Weather, \"Jh9qj1wM2jWYDj/RloeZJ73BCZo=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/Tirath/Desktop/XO/weather-app/src/Weather.js"],"names":["useState","WeatherDisplay","Weather","zip","setZip","data","setData","cordinates","setCordinates","longitude","latitude","option","setOption","getWeather","apikey","path","res","fetch","json","console","log","temp","main","desc","weather","description","name","err","message","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","error","warn","code","e","preventDefault","target","value","navigator","geolocation","getCurrentPosition"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport WeatherDisplay from './WeatherDisplay';\nimport './Weather.css';\n\nfunction Weather() {\n\n  const [zip, setZip ] = useState('');\n  const [data, setData] = useState(null);\n  const [ cordinates, setCordinates ] = useState({longitude:0,latitude:0});\n  const [ option, setOption] = useState(true);\n\n\n\n  async function getWeather(){\n    try{\n        const apikey = 'f2bcc407ea95e0bbd8ece48647a3eb8e';\n        const path = option ? `https://api.openweathermap.org/data/2.5/weather?zip=${zip}&appid=${apikey}&units=imperial` :\n        `https://api.openweathermap.org/data/2.5/weather?lat=${cordinates.latitude}&lon=${cordinates.longitude}&appid=${apikey}&units=imperial`;\n        const res = await fetch(path)\n        const json = await res.json()\n        console.log(json);\n        const temp = json.main.temp\n        const desc = json.weather[0].description\n        const name = json.name\n        setData({temp,desc,name});\n    }\n    catch(err){\n        console.log(err.message);\n    }\n  }\n\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  \n  function success(pos) {\n    var crd = pos.coords;\n    setCordinates({\n        latitude:crd.latitude,\n        longitude:crd.longitude\n    })\n  }\n  \n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n  \n\n\n\n\n  return (\n    <div className=\"Weather\">\n\n        <div>\n            {data ? <WeatherDisplay {...data} /> : null}\n        </div>\n      <form onSubmit={ e => {\n          e.preventDefault()\n          getWeather()\n      }}>\n        <input \n          type=\"text\"\n          placeholder=\"enter zip\"\n          value={zip}\n          onChange={ e => setZip(e.target.value) }\n        />\n        <button type=\"submit\">Submit</button>\n        <button onClick={ () => \n            { setOption(false);\n              navigator.geolocation.getCurrentPosition(success, error, options)}\n        }>Get Location</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}